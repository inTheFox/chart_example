@page "/"
@using StokChart.Blazor.Core.Interfaces
@using StokChart.Blazor.Core.Enums
@using StokChart.Blazor.Core.Implementations
@using StokChart.Blazor.Core.Models

@implements IDisposable
@inject IToastService ToastService

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Elevation="15" Class="mt-2">
        <MudToolBar>
            <MudText Typo="Typo.h6">StockChart</MudText>
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomCenter">
            </MudMenu>
        </MudToolBar>
        <MudPaper Class="p-1">
            <MudGrid Spacing="0">
                <MudItem sm="9">
                    <StockChart @ref="_chart" />
                    
                    <MudPaper Class="mt-2 p-3">
                        <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddAreaButtonCallback">Add new area</MudButton>

                        <MudSelect Variant="Variant.Filled" Class="mt-2 mb-1" T="IChartArea" Label="Active area" @bind-Value="_activeArea">
                            @{
                                foreach (var area in _areas)
                                {
                                    <MudSelectItem Value="@area">@area.Id</MudSelectItem>
                                }
                            }
                        </MudSelect>
                        
                        <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Error" OnClick="RemoveAreaButtonCallback">Remove active area</MudButton>
                        
                        <MudGrid Class="mt-1" Justify="Justify.Center" Spacing="1">
                            <MudItem md="6">
                                <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddAxisXButtonCallback">Add axis X</MudButton>
                            </MudItem>
                            <MudItem md="6">
                                <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Error" OnClick="RemoveAxisXButtonCallback">Remove axis X</MudButton>
                            </MudItem>
                            <MudItem md="6">
                                <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddAxisYButtonCallback">Add axis Y</MudButton>
                            </MudItem>
                            <MudItem md="6">
                                <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Error" OnClick="RemoveAxisYButtonCallback">Remove axis Y</MudButton>
                            </MudItem>
                        </MudGrid>
                        
                        <MudButton Class="mt-2" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddCandlesToAreaCallback">Add candles to active area</MudButton>
                        <MudButton Class="mt-1" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddTrades">Add trades to active area</MudButton>
                        <MudButton Class="mt-1" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddOrders">Add orders to active area</MudButton>

                        <MudGrid Spacing="1" Class="mt-2">
                            <MudItem md="6">
                                <MudButton Class="mt-2" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddBuyTradeCallback">Trade-buy</MudButton>
                            </MudItem>
                            <MudItem md="6">
                                <MudButton Class="mt-2" FullWidth="true" Variant="Variant.Filled" Color="Color.Error" OnClick="AddSellTradeCallback">Trade-sell</MudButton>
                            </MudItem>
                            
                            <MudItem md="6">
                                <MudButton Class="mt-2" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" OnClick="AddBuyOrderCallback">Order-buy</MudButton>
                            </MudItem>
                            <MudItem md="6">
                                <MudButton Class="mt-2" FullWidth="true" Variant="Variant.Filled" Color="Color.Error" OnClick="AddSellOrderCallback">Order-sell</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem sm="3">
                    <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2">
                        <MudPaper Elevation="5" Class="p-1 mb-1">
                            <MudCheckBox T="bool" @bind-Value="@_chart.CrossHair" Label="CrossHair"></MudCheckBox>
                        </MudPaper>
                        <MudPaper Elevation="5" Class="p-1 mb-1">
                            <MudCheckBox T="bool" @bind-Value="@_chart.CrossHairTooltip" Label="CrossHairTooltip"></MudCheckBox>
                        </MudPaper>
                        <MudPaper Elevation="5" Class="p-1 mb-1">
                            <MudCheckBox T="bool" @bind-Value="@_chart.CrossHairAxisLabels" Label="CrossHairAxisLabels"></MudCheckBox>
                        </MudPaper>
                        <MudPaper Elevation="5" Class="p-1 mb-1">
                            <MudCheckBox T="bool" @bind-Value="@_chart.IsAutoScroll" Label="IsAutoScroll"></MudCheckBox>
                        </MudPaper>
                        <MudPaper Elevation="5" Class="p-1 mb-1">
                            <MudCheckBox T="bool" @bind-Value="@_chart.IsAutoRange" Label="IsAutoRange"></MudCheckBox>
                        </MudPaper>
                        <MudPaper Elevation="5" Class="p-1 mb-1">
                            <MudCheckBox T="bool" @bind-Value="@_chart.ShowLegend" Label="ShowLegend"></MudCheckBox>
                        </MudPaper>
                        <MudPaper Elevation="5" Class="p-1 mb-1">
                            <MudCheckBox T="bool" @bind-Value="@_chart.ShowOverview" Label="ShowOverview"></MudCheckBox>
                        </MudPaper>
                    </MudNavMenu>
                </MudItem>
            </MudGrid>

        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private IChart _chart;

    private readonly List<IChartArea> _areas = new();
    private IChartArea? _activeArea;

    private const int UpdateDelay = 1000;
    private Task? _updateTask;

    private int _updateItterator = 0;
    private readonly List<double> _openValues = new(PaneTestData.OpenValues.OfType<double>());
    private readonly List<double> _highValues = new(PaneTestData.HighValues.OfType<double>());
    private readonly List<double> _lowValues = new(PaneTestData.LowValues.OfType<double>());
    private readonly List<double> _closeValues = new(PaneTestData.CloseValues.OfType<double>());
    private readonly List<double> _volumeValues = new(PaneTestData.VolumeValues.OfType<double>());
    
    private readonly List<IChartCandleElement> _candleElements = new();
    private readonly List<IChartTradeElement> _tradeElements = new();
    private readonly List<IChartOrderElement> _orderElements = new();

    private ExampleOrder? _order;
    private ExampleTrade? _trade;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await _chart.InitChartAsync();
        await AddAreaButtonCallback();

        _chart.AreaAdded += (area) =>
        {
            ToastService.ShowSuccess("Область добавлена");
        };
        _chart.AreaRemoved += (area) =>
        {
            ToastService.ShowError("Область удалена");
        };

        _updateTask = Task.Factory.StartNew(async () =>
        {
            try
            {
                while (true)
                {
                    await OnUpdate();
                    await Task.Delay(UpdateDelay);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }, TaskCreationOptions.LongRunning);
        return;
    }

    private async Task OnUpdate()
    {
        if (_candleElements.Count <= 0) return;

        if (_updateItterator + 1 >= _openValues.Count)
        {
            _updateItterator = 0;
        }

        var data = _chart.CreateData();
        var item = data.Group(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() / 1000);

        decimal openValue = new decimal(_openValues[_updateItterator]);
        decimal highValue = new decimal(_highValues[_updateItterator]);
        decimal lowValue = new decimal(_lowValues[_updateItterator]);
        decimal closeValue = new decimal(_closeValues[_updateItterator]);
        decimal volume = new decimal(_volumeValues[_updateItterator]);

        foreach (var candleElement in _candleElements)
        {
            item.Add(candleElement, new CandleMessage(openValue, highValue, lowValue, closeValue, volume));
        }

        if (_order != null)
        {
            foreach (var orderElement in _orderElements)
            {
                _order.X = item.DateOffset;

                if (_order.Side == Sides.Buy)
                {
                    _order.Y = lowValue;
                }
                else
                {
                    _order.Y = highValue;
                }
                item.Add(orderElement, _order);
            }
            _order = null;
        }
        if (_trade != null)
        {
            foreach (var tradeElement in _tradeElements)
            {
                _trade.X = item.DateOffset;

                if (_trade.Side == Sides.Buy)
                {
                    _trade.Y = lowValue;
                }
                else
                {
                    _trade.Y = highValue;
                }
                item.Add(tradeElement, _trade);
            }
            _trade = null;
        }
        await _chart.DrawAsync(data);

        _updateItterator++;
    }

    private async Task AddAreaButtonCallback()
    {
        var area = await _chart.CreateAreaAsync();
        await area.AddXAxis(ChartAxisType.CategoryDateTime);
        await area.AddYAxis(ChartAxisType.Numeric);
        await area.InitModifers();

        _areas.Add(area);
        _activeArea = area;

        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveAreaButtonCallback()
    {
        if (_activeArea == null) return;
        if (_areas.Count <= 1)
        {
            ToastService.ShowError("Нельзя удалить область по умолчанию");
            return;
        }

        await _chart.RemoveAreaAsync(_activeArea);

        _areas.RemoveAll(p => p.Id == _activeArea.Id);
        _activeArea = _areas.LastOrDefault();
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddAxisXButtonCallback()
    {
        if (_activeArea == null) return;
        await _activeArea.AddXAxis(ChartAxisType.CategoryDateTime);
    }


    private async Task AddAxisYButtonCallback()
    {
        if (_activeArea == null) return;
        await _activeArea.AddYAxis(ChartAxisType.Numeric);
    }

    private async Task RemoveAxisXButtonCallback()
    {
        if (_activeArea == null) return;
        if (_activeArea.XAxises.Count <= 1)
        {
            ToastService.ShowError("Нельзя удалить ось по умолчанию");
            return;
        }

        var axis = _activeArea.XAxises.LastOrDefault();
        if (axis == null) return;

        await _chart.RemoveAxisAsync(axis);
    }

    private async Task RemoveAxisYButtonCallback()
    {
        if (_activeArea == null) return;
        if (_activeArea.YAxises.Count <= 1)
        {
            ToastService.ShowError("Нельзя удалить ось по умолчанию");
            return;
        }

        var axis = _activeArea.YAxises.LastOrDefault();
        if (axis == null) return;

        await _chart.RemoveAxisAsync(axis);
    }

    private async Task AddCandlesToAreaCallback()
    {
        if (_activeArea == null) return;

        if (_candleElements.FirstOrDefault(p => p.ChartArea.Id == _activeArea.Id) != null)
        {
            ToastService.ShowError("На этой области уже есть свечная серия.");
            return;
        }

        var candleItem = await _activeArea.AddCandlesAsync();
        candleItem.UpFillColor = System.Drawing.Color.GreenYellow;
        candleItem.UpBorderColor = System.Drawing.Color.Green;
        candleItem.DownFillColor = System.Drawing.Color.IndianRed;
        candleItem.DownBorderColor = System.Drawing.Color.DarkRed;
        _candleElements.Add(candleItem);
    }

    private async Task AddTrades()
    {
        if (_activeArea == null) return;

        if (_tradeElements.FirstOrDefault(p => p.ChartArea.Id == _activeArea.Id) != null)
        {
            ToastService.ShowError("На этой области уже есть такая серия");
            return;
        }

        var tradeElement = await _activeArea.AddTradesAsync();
        tradeElement.BuyColor = System.Drawing.Color.LightGreen;
        tradeElement.BuyStrokeColor = System.Drawing.Color.Green;
        tradeElement.SellColor = System.Drawing.Color.IndianRed;
        tradeElement.SellStrokeColor = System.Drawing.Color.Red;
        _tradeElements.Add(tradeElement);
    }

    private async Task AddOrders()
    {
        if (_activeArea == null) return;

        if (_orderElements.FirstOrDefault(p => p.ChartArea.Id == _activeArea.Id) != null)
        {
            ToastService.ShowError("На этой области уже есть такая серия");
            return;
        }

        var orderElement = await _activeArea.AddOrdersAsync();
        orderElement.BuyColor = System.Drawing.Color.YellowGreen;
        orderElement.BuyStrokeColor = System.Drawing.Color.Yellow;
        orderElement.SellColor = System.Drawing.Color.DeepSkyBlue;
        orderElement.SellStrokeColor = System.Drawing.Color.Blue;
        _orderElements.Add(orderElement);
    }

    private async Task AddBuyTradeCallback()
    {
        if (_trade != null) return;

        _trade = new ExampleTrade(
            0,
            0,
            0,
            Sides.Buy,
            500, 500
        );
    }

    private async Task AddSellTradeCallback()
    {
        if (_trade != null) return;

        _trade = new ExampleTrade(
            0,
            0,
            0,
            Sides.Sell,
            500, 500
        );
    }

    private async Task AddBuyOrderCallback()
    {
        if (_order != null) return;

        _order = new ExampleOrder(
            0,
            0,
            0,
            Sides.Buy,
            500, 500
        );
    }

    private async Task AddSellOrderCallback()
    {
        if (_order != null) return;

        _order = new ExampleOrder(
            0,
            0,
            0,
            Sides.Sell,
            500, 500
        );
    }

    public void Dispose()
    {
        _updateTask?.Dispose();
    }

}
